Na última vez, falamos sobre os "ingredientes" e os "passos" gerais. Agora, vamos mergulhar mais fundo em cada um, como se estivéssemos olhando com uma lupa.
Os Ingredientes: Detalhando o "Armazenamento"

Pense nos "ingredientes" como caixas onde guardamos informações. Em Java, essas caixas têm nomes especiais:

    O Tabuleiro (A Folha Quadriculada):
        Lembra da nossa folha quadriculada 5x5? Em Java, a gente chama isso de matriz (ou "array de arrays").
        Imagine uma gaveta com 5 prateleiras, e em cada prateleira, tem 5 divisórias. Cada divisória guarda um símbolo: '~', 'N', 'X', ou 'O'.
        Para acessar uma divisória, você precisa dizer a "prateleira" (linha) e a "divisória" (coluna). Tipo: "Vá para a prateleira 0, divisória 0".
        Duas Versões do Tabuleiro: Para o jogo ser justo, você vai precisar de duas dessas "gavetas" (matrizes):
            Uma matriz secreta: Onde os 'N' dos navios realmente estão. Só o jogo sabe onde eles estão.
            Uma matriz visível: Essa é a que o jogador vê. Começa só com '~'. Quando o jogador atira, ela é atualizada com 'X' (acertou) ou 'O' (errou).

    A Posição dos Navios (Onde o Tesouro Está Escondido):
        Você precisa guardar 3 endereços, certo? (linha, coluna).
        Você pode usar uma "lista" (em Java, a gente chama de ArrayList ou simplesmente um array) para guardar esses endereços. Cada item da lista seria um "par" de números (linha e coluna).
        Pense: Como você vai guardar um "par" de números juntos? Talvez você possa criar uma "caixinha personalizada" que sempre guarda dois números, e aí ter 3 dessas caixinhas na sua lista. Ou, mais simples, ter uma lista para as linhas e outra para as colunas, e a primeira linha da primeira lista corresponde à primeira coluna da segunda lista.

    Quantos Navios Faltam Afundar (O Contador de Tesouros):
        Uma simples "caixa" (em Java, uma variável) que guarda um número inteiro. Começa em 3. Quando um navio é afundado, o número dentro dessa caixa diminui em 1.

    Quantas Tentativas Restam (O Relógio de Areia):
        Outra "caixa" (variável) que guarda um número inteiro. Começa em 10. A cada tiro, o número dentro dessa caixa diminui em 1.

Os Passos da Receita: Detalhando as Ações

Agora, vamos detalhar as ações que o jogo vai fazer. Pense em cada uma como um "mini-robô" que faz uma tarefa específica:

Parte 1: Preparando o Jogo (O Setup Inicial)

    Pedir a Posição dos Navios (O Robô "Perguntador" e "Verificador"):
        Perguntar: O jogo precisa de um "microfone" para ouvir o que o usuário digita. Em Java, a gente usa uma ferramenta chamada Scanner para isso. Ela "escuta" o teclado.
        Ler: O Scanner vai ler dois números (a linha e a coluna) que o usuário digitar.
        Verificar (Validação):
            Está no Tabuleiro? O robô precisa verificar se a linha e a coluna estão entre 0 e 4. Se o usuário digitar 5, 5, o robô diz: "Opa! Essa posição não existe. Tente de novo!" e pergunta de novo.
            Já tem Navio Lá? O robô também precisa verificar se a posição que o usuário digitou já não tem um navio. Não queremos colocar dois navios no mesmo lugar! Se sim, ele diz: "Já tem um navio aí! Escolha outro lugar." e pergunta de novo.
            Como fazer isso? Você vai usar algo que em Java se chama if (se) e else (senão) para tomar decisões. E para repetir a pergunta até que a resposta seja boa, você vai usar um while (enquanto) — "enquanto a posição for inválida, continue perguntando".
        Guardar: Depois de ter uma posição válida, o robô guarda essa linha e coluna na sua lista de posições de navios. E também coloca um 'N' na matriz secreta do tabuleiro.

    Montar o Tabuleiro Inicial (O Robô "Desenhista"):
        Para a matriz visível (a que o jogador vê), o robô vai "visitar" cada quadradinho, um por um, e colocar um '~' (água) em todos eles.
        Como visitar cada quadradinho? Você vai usar duas "rodas giratórias" (em Java, chamamos de for loops, ou "laços de repetição"). Uma roda gira para as linhas (de 0 a 4) e, para cada linha, a outra roda gira para as colunas (de 0 a 4). Assim, ele visita todos os 25 quadradinhos.

    Mostrar o Tabuleiro para o Jogador (O Robô "Apresentador"):
        O robô vai usar as mesmas duas "rodas giratórias" para visitar cada quadradinho da matriz visível.
        Para cada quadradinho, ele vai "imprimir" o símbolo que está lá.
        Importante: Ele também precisa imprimir os números das colunas (0 1 2 3 4) no topo e os números das linhas (0, 1, 2, 3, 4) na lateral, como no exemplo que você me deu, para o jogador se orientar.

Parte 2: Jogando o Batalha Naval (O Loop Principal do Jogo)

Essa parte é um grande "enquanto" (while) que vai se repetir até o jogo acabar.

    Mostrar o Tabuleiro Atualizado e as Tentativas Restantes (O Robô "Apresentador" de Novo):
        Ele faz exatamente o que o robô "Apresentador" da Parte 1 faz, mas usando a matriz visível que já foi atualizada com 'X' e 'O'.
        Ele também imprime o valor da sua "caixa" de "Tentativas Restantes".

    Pedir a Linha e a Coluna do Tiro (O Robô "Perguntador" de Novo):
        Novamente, o Scanner "escuta" o teclado.
        Validação:
            Está no Tabuleiro? (Mesma verificação de antes).
            Já Atirou Lá? Essa é nova! O robô precisa verificar na matriz visível se a posição que o jogador digitou já tem um 'X' ou um 'O'. Se sim, ele diz: "Você já atirou aí! Tente outro lugar." e pergunta de novo.

    Verificar se Acertou ou Errou (O Robô "Detetive"):
        O robô vai olhar na matriz secreta (aquela que só ele conhece) na linha e coluna que o jogador atirou.
        Se o que ele encontrar lá for um 'N' (navio):
            Ele diz: "Você acertou um navio!"
            Ele muda o 'N' na matriz secreta para 'X' (para marcar que aquele navio já foi acertado).
            Ele muda o '~' ou 'N' na matriz visível para 'X'.
            Ele diminui em 1 o número na sua "caixa" de "Navios Faltando Afundar".
        Senão (se não for 'N'):
            Ele diz: "Você errou a água!"
            Ele muda o '~' na matriz visível para 'O'.

    Atualizar a Contagem de Tentativas (O Robô "Contador"):
        Ele diminui em 1 o número na sua "caixa" de "Tentativas Restantes".

Parte 3: O Final do Jogo (O Robô "Juiz")

O grande "enquanto" (while) da Parte 2 vai continuar rodando enquanto duas condições forem verdadeiras:

    Enquanto o número de "Navios Faltando Afundar" for maior que zero.
    E enquanto o número de "Tentativas Restantes" for maior que zero.

Quando uma dessas condições se tornar falsa, o "enquanto" para, e o robô "Juiz" entra em ação:

    Se o número de "Navios Faltando Afundar" for zero:
        O robô "Juiz" diz: "Parabéns! Você afundou todos os navios." (Vitória!)
    Senão (se o número de navios ainda for maior que zero):
        O robô "Juiz" diz: "Suas tentativas acabaram! Game Over." (Derrota!)